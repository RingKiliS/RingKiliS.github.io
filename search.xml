<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>4月表后个人卡组分享</title>
      <link href="/post/1/"/>
      <url>/post/1/</url>
      
        <content type="html"><![CDATA[<h1 id="4月表后个人卡组分享"><a href="#4月表后个人卡组分享" class="headerlink" title="4月表后个人卡组分享"></a>4月表后个人卡组分享</h1><h2 id="肃声——无天底构筑"><a href="#肃声——无天底构筑" class="headerlink" title="肃声——无天底构筑"></a>肃声——无天底构筑</h2><p><img src="/post/1/card.jpg"></p><h3 id="个人喜欢任何卡组都携带一张吸血鬼千金，如你想上位，该卡组中建议替换成-原始生命态-尼比鲁"><a href="#个人喜欢任何卡组都携带一张吸血鬼千金，如你想上位，该卡组中建议替换成-原始生命态-尼比鲁" class="headerlink" title="个人喜欢任何卡组都携带一张吸血鬼千金，如你想上位，该卡组中建议替换成[原始生命态 尼比鲁]"></a>个人喜欢任何卡组都携带一张吸血鬼千金，如你想上位，该卡组中建议替换成[原始生命态 尼比鲁]</h3><h3 id="side方面如果不喜欢解场卡可以选择将心变、雷击结界波选择性替换成三战"><a href="#side方面如果不喜欢解场卡可以选择将心变、雷击结界波选择性替换成三战" class="headerlink" title="side方面如果不喜欢解场卡可以选择将心变、雷击结界波选择性替换成三战"></a>side方面如果不喜欢解场卡可以选择将心变、雷击结界波选择性替换成三战</h3><h2 id="ydk"><a href="#ydk" class="headerlink" title="ydk"></a>ydk</h2><p>复制到txt后更名为ydk即可（传文件耗费服务器资源的，本来就卡）</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span>created by ygomobile</span><br><span class="line"><span class="params">#</span>main</span><br><span class="line">25801745</span><br><span class="line">25801745</span><br><span class="line">25801745</span><br><span class="line">51296484</span><br><span class="line">51296484</span><br><span class="line">51296484</span><br><span class="line">88284599</span><br><span class="line">10774240</span><br><span class="line">10774240</span><br><span class="line">4810828</span><br><span class="line">66425726</span><br><span class="line">92919429</span><br><span class="line">92919429</span><br><span class="line">92919429</span><br><span class="line">26866984</span><br><span class="line">52472775</span><br><span class="line">52472775</span><br><span class="line">98477480</span><br><span class="line">98477480</span><br><span class="line">98477480</span><br><span class="line">39114494</span><br><span class="line">86310763</span><br><span class="line">13048472</span><br><span class="line">13048472</span><br><span class="line">49238328</span><br><span class="line">73642296</span><br><span class="line">59438931</span><br><span class="line">14558127</span><br><span class="line">14558127</span><br><span class="line">14558127</span><br><span class="line">97268402</span><br><span class="line">97268402</span><br><span class="line">23434538</span><br><span class="line">23434538</span><br><span class="line">23434538</span><br><span class="line">6039967</span><br><span class="line">27204311</span><br><span class="line">10045474</span><br><span class="line">10045474</span><br><span class="line">10045474</span><br><span class="line">24224830</span><br><span class="line"><span class="params">#</span>extra</span><br><span class="line">22850702</span><br><span class="line">80696379</span><br><span class="line">79606837</span><br><span class="line">79606837</span><br><span class="line">93039339</span><br><span class="line">98127546</span><br><span class="line">86066372</span><br><span class="line">45819647</span><br><span class="line">9839945</span><br><span class="line">73898890</span><br><span class="line">29301450</span><br><span class="line">65741786</span><br><span class="line">2220237</span><br><span class="line">41999284</span><br><span class="line">94259633</span><br><span class="line">!side</span><br><span class="line">4031928</span><br><span class="line">12580477</span><br><span class="line">14532163</span><br><span class="line">14532163</span><br><span class="line">18144506</span><br><span class="line">54693926</span><br><span class="line">8267140</span><br><span class="line">8267140</span><br><span class="line">15693423</span><br><span class="line">15693423</span><br><span class="line">58921041</span><br><span class="line">58921041</span><br><span class="line">94145021</span><br><span class="line">94145021</span><br><span class="line">94145021</span><br></pre></td></tr></table></figure><h5 id="end"><a href="#end" class="headerlink" title="end"></a>end</h5>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试md样式标准文件 - test</title>
      <link href="/post/63256/"/>
      <url>/post/63256/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcome-to-Leanote-欢迎来到Leanote"><a href="#Welcome-to-Leanote-欢迎来到Leanote" class="headerlink" title="Welcome to Leanote! 欢迎来到Leanote!"></a>Welcome to Leanote! 欢迎来到Leanote!</h1><h2 id="1-排版"><a href="#1-排版" class="headerlink" title="1. 排版"></a>1. 排版</h2><p><strong>粗体</strong> <em>斜体</em> </p><p><del>这是一段错误的文本。</del></p><p>引用:</p><blockquote><p>引用Leanote官方的话, 为什么要做Leanote, 原因是…</p></blockquote><p>有充列表:</p><ol><li>支持Vim</li><li>支持Emacs</li></ol><p>无序列表:</p><ul><li>项目1</li><li>项目2</li></ul><h2 id="2-图片与链接"><a href="#2-图片与链接" class="headerlink" title="2. 图片与链接"></a>2. 图片与链接</h2><p>图片:<br><img src="http://leanote.com/images/logo/leanote_icon_blue.png" alt="leanote"><br>链接:</p><p><a href="http://leanote.leanote.com/">这是去往Leanote官方博客的链接</a></p><h2 id="3-标题"><a href="#3-标题" class="headerlink" title="3. 标题"></a>3. 标题</h2><p>以下是各级标题, 最多支持6级标题</p><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h2><p>示例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> m[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码高亮示例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">fib</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">        Employee.empCount += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="5-Markdown-扩展"><a href="#5-Markdown-扩展" class="headerlink" title="5. Markdown 扩展"></a>5. Markdown 扩展</h1><p>Markdown 扩展支持:</p><ul><li>表格</li><li>定义型列表</li><li>Html 标签</li><li>脚注</li><li>目录</li><li>时序图与流程图</li><li>MathJax 公式</li></ul><h2 id="5-1-表格"><a href="#5-1-表格" class="headerlink" title="5.1 表格"></a>5.1 表格</h2><table><thead><tr><th>Item</th><th>Value</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以指定对齐方式, 如Item列左对齐, Value列右对齐, Qty列居中对齐</p><table><thead><tr><th align="left">Item</th><th align="right">Value</th><th align="center">Qty</th></tr></thead><tbody><tr><td align="left">Computer</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td align="left">Phone</td><td align="right">$12</td><td align="center">12</td></tr><tr><td align="left">Pipe</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h2 id="5-2-定义型列表"><a href="#5-2-定义型列表" class="headerlink" title="5.2 定义型列表"></a>5.2 定义型列表</h2><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">代码块（左侧有八个不可见的空格）</span><br></pre></td></tr></table></figure><h2 id="5-3-Html-标签"><a href="#5-3-Html-标签" class="headerlink" title="5.3 Html 标签"></a>5.3 Html 标签</h2><p>支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>值班人员<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李强<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王平<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table>    <tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></table>**提示**, 如果想对图片的宽度和高度进行控制, 你也可以通过img标签, 如:<img src="http://leanote.com/images/logo/leanote_icon_blue.png" width="50px"><h2 id="5-4-脚注"><a href="#5-4-脚注" class="headerlink" title="5.4 脚注"></a>5.4 脚注</h2><p>Leanote[^footnote]来创建一个脚注<br>[^footnote]: Leanote是一款强大的开源云笔记产品.</p><h2 id="5-5-目录"><a href="#5-5-目录" class="headerlink" title="5.5 目录"></a>5.5 目录</h2><p>通过 <code>[TOC]</code> 在文档中插入目录, 如:</p><p>[TOC]</p><h2 id="5-6-时序图与流程图"><a href="#5-6-时序图与流程图" class="headerlink" title="5.6 时序图与流程图"></a>5.6 时序图与流程图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><p>流程图:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line"> </span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示:</strong> 更多关于时序图与流程图的语法请参考:</p></blockquote><blockquote><ul><li><a href="http://bramp.github.io/js-sequence-diagrams/">时序图语法</a></li><li><a href="http://adrai.github.io/flowchart.js">流程图语法</a></li></ul></blockquote><h2 id="5-7-MathJax-公式"><a href="#5-7-MathJax-公式" class="headerlink" title="5.7 MathJax 公式"></a>5.7 MathJax 公式</h2><p>$ 表示行内公式： </p><p>质能守恒方程可以用一个很简洁的方程式 $E&#x3D;mc^2$ 来表达。</p><p>$$ 表示整行公式：</p><p>$$\sum_{i&#x3D;1}^n a_i&#x3D;0$$</p><p>$$f(x_1,x_x,\ldots,x_n) &#x3D; x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><p>$$\sum^{j-1}<em>{k&#x3D;0}{\widehat{\gamma}</em>{kj} z_k}$$</p><p>更复杂的公式:<br>$$<br>\begin{eqnarray}<br>\vec\nabla \times (\vec\nabla f) &amp; &#x3D; &amp; 0  \cdots\cdots梯度场必是无旋场\<br>\vec\nabla \cdot(\vec\nabla \times \vec F) &amp; &#x3D; &amp; 0\cdots\cdots旋度场必是无散场\<br>\vec\nabla \cdot (\vec\nabla f) &amp; &#x3D; &amp; {\vec\nabla}^2f\<br>\vec\nabla \times(\vec\nabla \times \vec F) &amp; &#x3D; &amp; \vec\nabla(\vec\nabla \cdot \vec F) - {\vec\nabla}^2 \vec F\<br>\end{eqnarray}<br>$$</p><p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vuepress注意事项</title>
      <link href="/post/38650/"/>
      <url>/post/38650/</url>
      
        <content type="html"><![CDATA[<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="npm创建不成功"><a href="#npm创建不成功" class="headerlink" title="npm创建不成功"></a>npm创建不成功</h3><p>换国内淘宝源，yarn、npx创建不成功也一样</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="可以运行，但是打包报错：Error-error-0308010C-digital-envelope-routines-unsupported-其他打包错误也可以先试试看这个方法"><a href="#可以运行，但是打包报错：Error-error-0308010C-digital-envelope-routines-unsupported-其他打包错误也可以先试试看这个方法" class="headerlink" title="可以运行，但是打包报错：Error: error:0308010C:digital envelope routines::unsupported(其他打包错误也可以先试试看这个方法)"></a>可以运行，但是打包报错：Error: error:0308010C:digital envelope routines::unsupported(其他打包错误也可以先试试看这个方法)</h3><p>node.js V17版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制。但是当然不能回退nodejs版本了,所以需要设置参数</p><p>Linux:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NODE_OPTIONS=--openssl-legacy-provider </span><br></pre></td></tr></table></figure><p>Windows:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set NODE_OPTIONS=--openssl-legacy-provider </span><br></pre></td></tr></table></figure><p>实际测试过后可以解决问题。但是这个解决方法需要每次打包的时候都先设置一次，所以打包经常遇到这个报错的话就把他放到package.json的脚本里吧。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm 整合 redis</title>
      <link href="/post/15005/"/>
      <url>/post/15005/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建项目，导入依赖"><a href="#1-创建项目，导入依赖" class="headerlink" title="1.创建项目，导入依赖"></a>1.创建项目，导入依赖</h2><h2 id="2-编写application-yml文件，设置启用的配置"><a href="#2-编写application-yml文件，设置启用的配置" class="headerlink" title="2.编写application.yml文件，设置启用的配置"></a>2.编写application.yml文件，设置启用的配置</h2><h2 id="3-启用的配置编写，配置端口、日志级别、数据源、mapperxml文件映射、静态资源、redis配置"><a href="#3-启用的配置编写，配置端口、日志级别、数据源、mapperxml文件映射、静态资源、redis配置" class="headerlink" title="3.启用的配置编写，配置端口、日志级别、数据源、mapperxml文件映射、静态资源、redis配置"></a>3.启用的配置编写，配置端口、日志级别、数据源、mapperxml文件映射、静态资源、redis配置</h2><h2 id="4-建立软件包，完善目录结构"><a href="#4-建立软件包，完善目录结构" class="headerlink" title="4.建立软件包，完善目录结构"></a>4.建立软件包，完善目录结构</h2><p>res下建立mappers存放xml文件</p><p>java目录下</p><blockquote><p>  entity 存放实体类</p><p>  service 存放seervice接口，在该包中再建立impl存放实现接口的具体实现类</p><p>  controller 存放控制器层mapper 存放sql接口，将来映射到mapperxml中</p><p>  utils 存放可能用到的工具类</p><p>  config 存放设置文件，扫描dao</p></blockquote><h2 id="config-配置类写法"><a href="#config-配置类写法" class="headerlink" title="config 配置类写法"></a>config 配置类写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(value = &quot;com.qzh.mapper&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="创建redis缓存配置类"><a href="#创建redis缓存配置类" class="headerlink" title="创建redis缓存配置类"></a>创建redis缓存配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java1412.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> java1412</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-06-06 10:09:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">// value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">// 解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span></span><br><span class="line">                RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                        .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                        .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                        .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置缓存的编码为json，缓存时间600s</p><p>（使用时直接粘贴即可，具体的配置自行修改）</p><h2 id="5-编写完整的业务和sql"><a href="#5-编写完整的业务和sql" class="headerlink" title="5.编写完整的业务和sql"></a>5.编写完整的业务和sql</h2><p>注意：</p><p>在dao中，事务的操作应该返回受影响的行数，查询的操作应该返回对应的实体类或集合</p><p>在service中，返回影响行数的方法应该变为返回map，便于前端处理，返回查询结果的方法，视业务决定，如登录应该返回状态，展示列表应返回集合（最后都应该是json字符串）</p><p>若是要将结果存储在redis中，则不能返回map，需要返回具体的对象，redis的注解可参考下面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;&quot;)</span><span class="comment">//查询，不指定key一般返回的是集合，value是在redis中的key</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;book&quot;,key = &quot;#id&quot;, unless = &quot;#result eq null&quot;)</span></span><br><span class="line"><span class="comment">//查询一个，key是方法中传入的形参，unless意为若返回的结果是null就不存入redis，处理掉异常</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = &quot;book&quot;,key = &quot;#result.id&quot;,unless =&quot;#result eq null&quot; )</span></span><br><span class="line"><span class="comment">//添加、更新，在添加时，不会传入id，但是存入redis需要有id，所以要在mapperxml中将自增的属性映射到实体类上</span></span><br><span class="line"><span class="comment">//具体如下</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;此处为对应的实体的属性&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新语句，使用了动态sql，所以会传入null，但是null不存入redis，所以需要在更新后再执行一次查询一个的语句，传入的形参是对象的属性，用get方法获取</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;book&quot;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="comment">//删除语句</span></span><br></pre></td></tr></table></figure><p>在conntroller层，请求的方式应该和需要的业务对应，可以参考下面</p><p>返回集合的、单个数据的</p><p>get 如果单个数据要传参，使用下面的方式会更好</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Book <span class="title function_">findOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span><br></pre></td></tr></table></figure><blockquote><p>  一般来说，生产中同一个接口地址可能会处理不同的业务，可以根据请求方法来处理</p><p>  添加数据 》》》put</p><p>  删除数据 》》》delete</p><p>  修改数据，需要考虑隐私性的请求 》》》post</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> springBoot </tag>
            
            <tag> redis </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目的简单搭建</title>
      <link href="/post/21428/"/>
      <url>/post/21428/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建项目模板"><a href="#1-创建项目模板" class="headerlink" title="1.创建项目模板"></a>1.创建项目模板</h2><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br><span class="line"># 进入改项目下</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="2-项目包下载"><a href="#2-项目包下载" class="headerlink" title="2.项目包下载"></a>2.项目包下载</h2><p><strong>项目包下执行(通常需要cd进入)</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios --save #ajax框架</span><br><span class="line">npm install vue-router --save #vue路由</span><br><span class="line">npm install element-plus --save #ep组件库</span><br><span class="line">npm install nprogress --save #导航守卫</span><br></pre></td></tr></table></figure><p>完整命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整命令</span></span><br><span class="line">npm install axios vue-router element-plus nprogress --save</span><br></pre></td></tr></table></figure><p>需要的组件包下载</p><h2 id="3-建立对应的、可能需要的包"><a href="#3-建立对应的、可能需要的包" class="headerlink" title="3.建立对应的、可能需要的包"></a>3.建立对应的、可能需要的包</h2><p>如views、router、api、utils等</p><h2 id="4-路由（router）相关配置"><a href="#4-路由（router）相关配置" class="headerlink" title="4.路由（router）相关配置"></a>4.路由（router）相关配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入相关模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter ,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//定义路由信息</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&quot;你需要启动vue项目就显示的组件信息。重定向路径不一定非要有&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span><span class="keyword">import</span>(<span class="string">&quot;组件路径&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/路径&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;/别名,该属性可以不使用&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;组件路径&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//二级路由</span></span><br><span class="line">        <span class="comment">//children:[</span></span><br><span class="line">        <span class="comment">//&#123;&#125;,</span></span><br><span class="line">        <span class="comment">//&#123;&#125;,多个二级</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line">&#125;,]</span><br><span class="line"><span class="comment">//创建路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//导航守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">start</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;前置守卫&quot;</span>);</span><br><span class="line">    <span class="comment">//登录判断,login不需要判断</span></span><br><span class="line">    <span class="comment">//let token = window.sessionStorage.getItem(&quot;token&quot;)</span></span><br><span class="line">    <span class="comment">//if(to.name == &quot;login&quot;)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//next();</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//else</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//if(token==null)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//next(&#123;name:&#x27;login&#x27;&#125;);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//else</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//next();</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h2 id="5-工具类"><a href="#5-工具类" class="headerlink" title="5.工具类"></a>5.工具类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;请求后端接口的服务器端口（在后端处理跨域问题）&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">3000</span>,<span class="comment">//等待的请求时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器&quot;</span>+config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截器&quot;</span>+response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><h2 id="6-在main-js中引入"><a href="#6-在main-js中引入" class="headerlink" title="6.在main.js中引入"></a>6.在main.js中引入</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;&#x27;</span> <span class="comment">//导入router.js配置的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用create(App).use(router)的方式来使用</span></span><br></pre></td></tr></table></figure><p>之后清空自带的样式，启动项目查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的java前后端分离项目部署</title>
      <link href="/post/19472/"/>
      <url>/post/19472/</url>
      
        <content type="html"><![CDATA[<h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="1-部署要求"><a href="#1-部署要求" class="headerlink" title="1.部署要求"></a>1.部署要求</h2><h3 id="1-一个可以运行的后端项目和前端项目，或一个可以运行的前后端不分离项目"><a href="#1-一个可以运行的后端项目和前端项目，或一个可以运行的前后端不分离项目" class="headerlink" title="1.一个可以运行的后端项目和前端项目，或一个可以运行的前后端不分离项目"></a>1.一个可以运行的后端项目和前端项目，或一个可以运行的前后端不分离项目</h3><h3 id="2-一个拥有公网ip的服务器，且有安装常见的操作系统"><a href="#2-一个拥有公网ip的服务器，且有安装常见的操作系统" class="headerlink" title="2.一个拥有公网ip的服务器，且有安装常见的操作系统"></a>2.一个拥有公网ip的服务器，且有安装常见的操作系统</h3><h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="1-项目的打包"><a href="#1-项目的打包" class="headerlink" title="1.项目的打包"></a>1.项目的打包</h3><h4 id="后端项目："><a href="#后端项目：" class="headerlink" title="后端项目："></a>后端项目：</h4><p>springBoot项一般常用打包方式有jar包、war包，springBoot如果是jar包自带了一个简单的tomcat，但是这样的jar包直接运行是会报错的。报错信息一般来说是application无法解析等。</p><p>这大概是因为，springBoot找不到启动类的路径，可以这样来解决：</p><p>在pom.xml中，修改bulid像下面这样</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>这里写上springBoot的启动类<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再进行打包，注意打成jar包需要使用maven操作，推荐直接使用命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到项目的根目录</span></span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>之后你可以在target下找到这个jar包</p><p>然后你可以测试一下能否运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在jar所在的目录下，确保你的java能够使用</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确认，然后使用java -jar 运行</span></span><br><span class="line">java -jar jar包名</span><br></pre></td></tr></table></figure><p>运行的效果应该和idea中相同</p><h5 id="至此，后端的项目打包就成功了。"><a href="#至此，后端的项目打包就成功了。" class="headerlink" title="至此，后端的项目打包就成功了。"></a>至此，后端的项目打包就成功了。</h5><h4 id="前端项目："><a href="#前端项目：" class="headerlink" title="前端项目："></a>前端项目：</h4><p>只尝试了vue的项目</p><p>在vue的项目下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>等待命令结束，你会在根目录下得到一个名字是dist的文件夹，这个就是项目包了。</p><h5 id="至此，前端项目的开发端打包结束。"><a href="#至此，前端项目的开发端打包结束。" class="headerlink" title="至此，前端项目的开发端打包结束。"></a>至此，前端项目的开发端打包结束。</h5><h3 id="2-项目的部署"><a href="#2-项目的部署" class="headerlink" title="2.项目的部署"></a>2.项目的部署</h3><p>通过各种手段连接到你的服务器，然后再通过各种手段上传上面的两个文件。</p><p>我的服务器是腾讯云，我直接使用了腾讯云的登录端，安装了他的上传插件上传。</p><p>使用你喜欢的方式安装需要的依赖、容器等，我这里采用yum的方式</p><p>我需要安装，java8（用于运行jar）、nodejs（用于运行前端vue）、mysql5.7以上（数据库）。</p><p>下面是命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测yum</span></span><br><span class="line"> rpm -qa|grep yum</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般来说都会自带，没有的话自己百度看看怎么安装或者直接用别的方法</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装java8</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测是否以及安装（纯洁的系统一般是没有的）</span></span><br><span class="line"> yum list installed |grep java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum install -y java-1.8.0-openjdk*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否成功（yum是会自动配置环境变量的）</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装nodejs（nodejs以及不对centos7及以下版本提供支持了，是这些版本要小心莫名其妙的bug）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置yum源（我这里有bug，没法安装13.x之后的版本，我实际开发的版本是18.16.0，但是最后也能运行）</span></span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_13.x | bash -</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装，安装不成功就切上面的源试试，我试了好几个，或者试试看换yum源</span></span><br><span class="line">yum -y install nodejs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>下面是安装mysql,yum安装mysql还挺麻烦（主要是设密码麻烦）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载rpm包</span></span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">yum -y install mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装mysql</span></span><br><span class="line">yum -y install mysql-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装成功可以查看一下状态</span></span><br><span class="line">systemctl status mysql.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看临时生成的密码</span></span><br><span class="line">cat /var/log/mysqld.log| grep password</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入</span></span><br><span class="line">mysql -u root -p 上面的生成密码</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后先把密码改了</span></span><br><span class="line">ALTER USER USER() IDENTIFIED BY &#x27;123456Admin@123&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码的级别</span></span><br><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码位数（我记得默认8位，很麻烦）</span></span><br><span class="line">set global validate_password_length=1;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完事再设置一下密码，这下可以自己设置密码了</span></span><br><span class="line">ALTER USER USER() IDENTIFIED BY &#x27;你的数据库密码&#x27;;# 注意：你的后端项目应该是有连接数据库相关内容的，如果不需要部署你就不用安装sql，这里的密码应该要和你后端的对应</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来自己建库，建表导数据之类的自行操作即可</span></span><br></pre></td></tr></table></figure><h5 id="至此，3个需要的依赖等已经安装完成"><a href="#至此，3个需要的依赖等已经安装完成" class="headerlink" title="至此，3个需要的依赖等已经安装完成"></a>至此，3个需要的依赖等已经安装完成</h5><p>下面开始部署</p><p>在服务器中，运行项目是需要非关闭运行的，通过外部连接打开的窗口关闭也要能够运行，所以需要使用到</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup your_command &amp;!</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">setsid your_command!</span><br></pre></td></tr></table></figure><p>这样命令可以脱离控制台，所以当我们退出会话或会话闲置一段时间后超时时，SIGHUP信号将发送到伪终端，并且停止在该终端上运行的所有任务，用这两个命令执行的任务不会被关闭</p><p>运行jar包</p><p>进入jar包所在目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup jar包名 &gt; /dev/null 2&gt; /dev/null &amp;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">nohup</span>会生成一个类型<span class="built_in">log</span>文件的对东西，把他送到linux的null下让他不生成能避免忽略写入问题，不过重要的日志还是不建议这样送入的</span></span><br><span class="line">nohup  java  -jar  jar包名 &amp;!</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行jar</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样就脱离ssh了</span></span><br></pre></td></tr></table></figure><p>下面开始配置vue项目</p><p>vue项目目前只有一个dist包，这样是无法启动的，需要一些配置和初始化</p><p>先进入到dist下的目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会创建一个package.json</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后，install你之前可能有的依赖</span></span><br><span class="line">npm install --save express</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样会生成安装目录的json和nodejs启动文件夹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用vi 查看package.json修改成下面这样</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vvvv&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.18.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中的start是启动的文件，你会发现这个文件是没有的，下面当然是创建他</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi server.js</span><br></pre></td></tr></table></figure><p>参考文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app  = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;dist&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="regexp">/.*/</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendfile</span>(__dirname + <span class="string">&#x27;./dist/index.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">82</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server start!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>主要关注启动端口即可</p><p>然后你可以尝试一下能否访问</p><p>和jar包一样，你需要一直运行</p><p>这里换一种方式</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setsid方式</span></span><br><span class="line">setsid npm start &amp;!</span><br></pre></td></tr></table></figure><p>这样就脱离ssh了(不过我实际测试好像一会就会结束)</p><h5 id="至此，项目的部署完全成功"><a href="#至此，项目的部署完全成功" class="headerlink" title="至此，项目的部署完全成功"></a>至此，项目的部署完全成功</h5><h3 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h3><p>dist包下的文件也可以直接用nginx部署，实际使用发现nginx更为稳定（废话），下面介绍一下</p><p>首先需要准备nginx的安装包，这里推荐个网站：<a href="https://nginx.p2hp.com/index.html">https://nginx.p2hp.com/index.html</a></p><p>页面不是很好看但是很实用，在右边的导航选择下载，随便找个版本，我这里用的是最新的1.25.1【时间：2023-07】</p><p>下载即可，注意不要下成windows版的了。</p><p>之后和上面的方式一样，上传到linux上</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到压缩包的目录下解压</span></span><br><span class="line">tar zxvf 压缩包</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入解压后的目录</span></span><br><span class="line">cd 目录名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置目的：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     1）检查环境 是否 满足安装条件     依赖解决</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     2）指定安装方式    配置文件   命令文件  各种文件放哪里   开启模块功能【内置模块  三方模块】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     3）指定软件安装在那里</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后执行安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成后可查看一下</span></span><br><span class="line">whereis nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后把dist里的所有东西全放到whereis查询的目录下的html目录下即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在html的同级目录下还有conf文件夹,里面有各种配置文件，常见的修改端口、启动页等都在nginx.conf里</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具体可以查看文档，这里不过多赘述。</span></span><br></pre></td></tr></table></figure><p>这时访问服务器地址或者域名（如果你配置了）就可以成功浏览页面了。 </p><p>完。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>springBoot的jar包运行解决：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/m0_67393413/article/details/124419703</span><br></pre></td></tr></table></figure><h4 id="以下是关于vue项目"><a href="#以下是关于vue项目" class="headerlink" title="以下是关于vue项目"></a>以下是关于vue项目</h4><p>vue项目打包运行【强烈建议看,很有用】：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1Ut411b7Wv/</span><br></pre></td></tr></table></figure><p>VueCil3文档：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://cli.vuejs.org/zh/guide/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Java </tag>
            
            <tag> springBoot </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个根据数据库表生成实体类的工具类</title>
      <link href="/post/16201/"/>
      <url>/post/16201/</url>
      
        <content type="html"><![CDATA[<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//该对象用于存放表字段转换成属性的字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">objStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">//该对象用于存放对应的getter、setter字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">gSMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">//该对象用于存放toString字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">tSMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;\n\t@Override\n\tpublic String toString() &#123;\n\t\treturn &quot;</span>);</span><br><span class="line">    <span class="comment">//连接数据库的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">Conn</span><span class="params">(String tableName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/&quot;</span>+tableName+<span class="string">&quot;?userUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        String user=<span class="string">&quot;&quot;</span>;<span class="comment">//你的数据库用户</span></span><br><span class="line">        String m=<span class="string">&quot;&quot;</span>;<span class="comment">//你的数据库密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            connection =  DriverManager.getConnection(url,user,m);</span><br><span class="line">            System.out.println(<span class="string">&quot;\n==============数据库连接成功==============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> connection;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;\n============连接失败,请查看错误信息============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换表字段到字符串的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getTableField</span><span class="params">(Connection conn,String fromName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            objStr.append(<span class="string">&quot;public class &quot;</span>).append(fromName).append(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            tSMethod.append(<span class="string">&quot;\&quot;&quot;</span>).append(fromName).append(<span class="string">&quot;&#123;\&quot;&quot;</span>).append(<span class="string">&quot;+\n\t\t&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from &quot;</span>+fromName;</span><br><span class="line">            pst = conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsMd</span> <span class="operator">=</span> pst.executeQuery().getMetaData();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rsMd.getColumnCount(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldType</span> <span class="operator">=</span> rsMd.getColumnTypeName(i + <span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> rsMd.getColumnName(i + <span class="number">1</span>);</span><br><span class="line">                System.out.print((i+<span class="number">1</span>)+<span class="string">&quot;.&quot;</span>+<span class="string">&quot;字段名称是：&quot;</span>+fieldName+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="comment">//首字母大写</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">upF</span> <span class="operator">=</span> fieldName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()</span><br><span class="line">                        + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">/*根据字段的数据类型，设置属性的数据类型（不知能否直接获取java类型，感觉可优化）</span></span><br><span class="line"><span class="comment">                 、getter、setter方法和toString方法</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">switch</span> (fieldType)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;INT&quot;</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;字段类型是：&quot;</span>+<span class="string">&quot;int&quot;</span>);</span><br><span class="line">                        objStr.append(<span class="string">&quot;\n\tprivate &quot;</span>).append(<span class="string">&quot;int &quot;</span>).append(fieldName).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                        <span class="comment">//get</span></span><br><span class="line">                        gSMethod.append(<span class="string">&quot;\n\tpublic int get&quot;</span>).append(upF).append(<span class="string">&quot;() &#123;\n\t\treturn &quot;</span>)</span><br><span class="line">                                .append(fieldName).append(<span class="string">&quot;;\n\t&#125;&quot;</span>);</span><br><span class="line">                        <span class="comment">//set</span></span><br><span class="line">                        gSMethod.append(<span class="string">&quot;\n\tpublic void set&quot;</span>).append(upF).append(<span class="string">&quot;(&quot;</span>).append(<span class="string">&quot;int &quot;</span>)</span><br><span class="line">                                .append(fieldName).append(<span class="string">&quot;) &#123;\n\t\tthis.&quot;</span>).append(fieldName)</span><br><span class="line">                                .append(<span class="string">&quot; = &quot;</span>).append(fieldName).append(<span class="string">&quot;;\n\t&#125;&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;VARCHAR&quot;</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;字段类型是：&quot;</span>+<span class="string">&quot;String&quot;</span>);</span><br><span class="line">                        objStr.append(<span class="string">&quot;\n\tprivate &quot;</span>).append(<span class="string">&quot;String &quot;</span>).append(fieldName).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                        <span class="comment">//get</span></span><br><span class="line">                        gSMethod.append(<span class="string">&quot;\n\tpublic String get&quot;</span>).append(upF).append(<span class="string">&quot;() &#123;\n\t\treturn &quot;</span>)</span><br><span class="line">                                .append(fieldName).append(<span class="string">&quot;;\n\t&#125;&quot;</span>);</span><br><span class="line">                        <span class="comment">//set</span></span><br><span class="line">                        gSMethod.append(<span class="string">&quot;\n\tpublic void set&quot;</span>).append(upF).append(<span class="string">&quot;(&quot;</span>).append(<span class="string">&quot;String &quot;</span>)</span><br><span class="line">                                .append(fieldName).append(<span class="string">&quot;) &#123;\n\t\tthis.&quot;</span>).append(fieldName)</span><br><span class="line">                                .append(<span class="string">&quot; = &quot;</span>).append(fieldName).append(<span class="string">&quot;;\n\t&#125;&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                获取表结构的方法</span></span><br><span class="line"><span class="comment">                &quot;java类型：rsMd.getColumnClassName(i + 1)</span></span><br><span class="line"><span class="comment">                数据库类型:&quot;+rsMd.getColumnTypeName(i + 1)</span></span><br><span class="line"><span class="comment">                字段名称:&quot;+rsMd.getColumnName(i + 1)</span></span><br><span class="line"><span class="comment">                字段长度:&quot;+rsMd.getColumnDisplaySize(i + 1)</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//toString</span></span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tSMethod.append(<span class="string">&quot;\&quot;, &quot;</span>).append(fieldName).append(<span class="string">&quot;=\&quot;&quot;</span>).append(<span class="string">&quot; + &quot;</span>)</span><br><span class="line">                            .append(fieldName).append(<span class="string">&quot; + \n\t\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    tSMethod.append(<span class="string">&quot;\&quot;&quot;</span>).append(fieldName).append(<span class="string">&quot;=\&quot;&quot;</span>).append(<span class="string">&quot; + &quot;</span>)</span><br><span class="line">                            .append(fieldName).append(<span class="string">&quot; + \n\t\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//使toString字符串结束</span></span><br><span class="line">            tSMethod.append(<span class="string">&quot;&#x27;&quot;</span>).append(<span class="string">&quot;&#125;&quot;</span>).append(<span class="string">&quot;&#x27;&quot;</span>).append(<span class="string">&quot;;&quot;</span>).append(<span class="string">&quot;\n\t&#125;&quot;</span>);</span><br><span class="line">            <span class="comment">//在属性后，需要添加getter、setter、toString</span></span><br><span class="line">            objStr.append(<span class="string">&quot;\n\n//getter setter方法&quot;</span>).append(gSMethod)</span><br><span class="line">                    .append(<span class="string">&quot;\n\n//toString方法&quot;</span>).append(tSMethod);</span><br><span class="line">            <span class="comment">//最后添加大括号，使实体类字符串结束</span></span><br><span class="line">            objStr.append(<span class="string">&quot;\n&#125;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;===========================================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;该表生成的实体类字符串如下:\n&quot;</span>+objStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SQLException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;\n===============您输入的表名可能不存在===============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后需要释放资源</span></span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pst!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pst.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SQLException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用io流，将字符串写入文件输出到磁盘上的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">StrToObject</span><span class="params">(String path,String fromName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;   <span class="comment">//该变量用于记录java文件夹的位置,以便获取实体类对应的软件包位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">packNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">packName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;package &quot;</span>);</span><br><span class="line">            String [] arr = path.split(<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i].equals(<span class="string">&quot;java&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    packNum = i+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> packNum; i &lt; arr.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                packName.append(arr[i]);</span><br><span class="line">                <span class="keyword">if</span>(i==arr.length-<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                packName.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;\n\n该实体类应处于的软件包位置是：&quot;</span>+packName);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path+<span class="string">&quot;\\\\&quot;</span>+fromName+<span class="string">&quot;.java&quot;</span>);</span><br><span class="line">            fileOutputStream.write(packName.toString().getBytes());</span><br><span class="line">            fileOutputStream.write(<span class="string">&quot;;\n&quot;</span>.getBytes());</span><br><span class="line">            fileOutputStream.write(objStr.toString().getBytes());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;实体类生成完成，请至对应的输出路径下查看&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileNotFoundException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件路径指定异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;写入异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(fileOutputStream!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IOException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fromToObject</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请要连接的数据库名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要转化成实体类的表名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入实体类要存放的路径(绝对路径)&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pathName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//连接数据库获取表字段并转换成字符串</span></span><br><span class="line">        TableUtils.getTableField(TableUtils.Conn(tableName),fromName);</span><br><span class="line">        <span class="comment">//使用io流写入文件到指定位置</span></span><br><span class="line">        TableUtils.StrToObject(pathName,fromName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="更新-2023-6-1"><a href="#更新-2023-6-1" class="headerlink" title="更新:2023.6.1"></a>更新:2023.6.1</h5><p>通过</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getColumnClassName()</span><br></pre></td></tr></table></figure><p>方法拿到数据库对应java里的数据，不需要使用switch语句了<br>使用lombok注解替换了getter setter toString方法，不需要拼接字符串了，但是需要在maven中加入lombok依赖<br>将首字母大写封装，新创建了一个将下划线转化为驼峰的方法，实现了转化驼峰命名<br>如下：</p><h3 id="改良版"><a href="#改良版" class="headerlink" title="改良版"></a>改良版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用注解的方式生成，优化属性获取</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewTableUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//该对象用于存放表字段转换成属性的字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">objStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title function_">Conn</span><span class="params">(String tableName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/&quot;</span>+tableName+<span class="string">&quot;?userUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        String user=<span class="string">&quot;你的数据库用户名&quot;</span>;</span><br><span class="line">        String m=<span class="string">&quot;你的数据库密码&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            connection =  DriverManager.getConnection(url,user,password);</span><br><span class="line">            System.out.println(<span class="string">&quot;\n==============数据库连接成功==============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> connection;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;\n============连接失败,请查看错误信息============&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首字母大写的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">upFirstCode</span><span class="params">(String str)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> str.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()</span><br><span class="line">                + str.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下划线命名转化驼峰命名的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">humpString</span><span class="params">(String str)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">finalStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String [] arr = str.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> upFirstCode(s);</span><br><span class="line">            finalStr.append(str2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finalStr.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换表字段到字符串的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getTableField</span><span class="params">(Connection conn,String fromName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pst</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;   <span class="comment">//先写入导包和注解</span></span><br><span class="line">            objStr.append(<span class="string">&quot;import lombok.AllArgsConstructor;\n&quot;</span>+</span><br><span class="line">                            <span class="string">&quot;import lombok.Data;\n&quot;</span>+</span><br><span class="line">                            <span class="string">&quot;import lombok.NoArgsConstructor;\n&quot;</span>+</span><br><span class="line">                            <span class="string">&quot;import lombok.ToString;\n\n&quot;</span>+</span><br><span class="line">                            <span class="string">&quot;@Data\n&quot;</span>+<span class="string">&quot;@AllArgsConstructor\n&quot;</span>+<span class="string">&quot;@NoArgsConstructor\n&quot;</span>+<span class="string">&quot;@ToString\n&quot;</span>);</span><br><span class="line">            <span class="comment">//添加类名,首字母要大写（无法将非下划线命名的字段或表名设为驼峰，可优化）</span></span><br><span class="line">            objStr.append(<span class="string">&quot;public class &quot;</span>).append(humpString(fromName)).append(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from &quot;</span>+fromName;</span><br><span class="line">            pst = conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsMd</span> <span class="operator">=</span> pst.executeQuery().getMetaData();</span><br><span class="line">            <span class="comment">//遍历字段的数量的次数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rsMd.getColumnCount(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//拿到数据库对应的java类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> rsMd.getColumnClassName(i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//根据.分割java类型</span></span><br><span class="line">                String[] javaType = className.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">                <span class="comment">//拿到分割后的最后的类型，就是字段的数据类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">finalJavaType</span> <span class="operator">=</span> javaType[javaType.length - <span class="number">1</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> humpString(rsMd.getColumnName(i + <span class="number">1</span>));</span><br><span class="line">                System.out.print((i+<span class="number">1</span>)+<span class="string">&quot;.&quot;</span>+<span class="string">&quot;字段名称是：&quot;</span>+fieldName+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;字段类型是：&quot;</span>+finalJavaType);</span><br><span class="line">                objStr.append(<span class="string">&quot;\n\tprivate &quot;</span>).append(finalJavaType).append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">                        .append(fieldName).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                获取表结构的方法</span></span><br><span class="line"><span class="comment">                &quot;java类型：rsMd.getColumnClassName(i + 1)</span></span><br><span class="line"><span class="comment">                数据库类型:&quot;+rsMd.getColumnTypeName(i + 1)</span></span><br><span class="line"><span class="comment">                字段名称:&quot;+rsMd.getColumnName(i + 1)</span></span><br><span class="line"><span class="comment">                字段长度:&quot;+rsMd.getColumnDisplaySize(i + 1)</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后添加大括号，使实体类字符串结束</span></span><br><span class="line">            objStr.append(<span class="string">&quot;\n&#125;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;===========================================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;该表生成的实体类字符串如下:\n&quot;</span>+objStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SQLException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;\n===============您输入的表名可能不存在===============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后需要释放资源</span></span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pst!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pst.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SQLException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用io流，将字符串写入文件输出到磁盘上的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">StrToObject</span><span class="params">(String path,String fromName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;   <span class="comment">//该变量用于记录java文件夹的位置,以便获取实体类对应的软件包位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">packNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">packName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;package &quot;</span>);</span><br><span class="line">            String [] arr = path.split(<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i].equals(<span class="string">&quot;java&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    packNum = i+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> packNum; i &lt; arr.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                packName.append(arr[i]);</span><br><span class="line">                <span class="keyword">if</span>(i==arr.length-<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                packName.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;\n\n该实体类应处于的软件包位置是：&quot;</span>+packName);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path+<span class="string">&quot;\\\\&quot;</span>+humpString(fromName)+<span class="string">&quot;.java&quot;</span>);</span><br><span class="line">            fileOutputStream.write(packName.toString().getBytes());</span><br><span class="line">            fileOutputStream.write(<span class="string">&quot;;\n&quot;</span>.getBytes());</span><br><span class="line">            fileOutputStream.write(objStr.toString().getBytes());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;实体类生成完成，请至对应的输出路径下查看&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileNotFoundException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件路径指定异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;写入异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(fileOutputStream!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IOException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//暴露给外部的调用方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fromToObject</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请先导入lombok再使用，若还没有导入，\n再输入连接数据库的名称的时候输入&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n 0exit0 \n来退出&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请要连接的数据库名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;0exit0&quot;</span>.equals(tableName))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要转化成实体类的表名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入实体类要存放的路径(绝对路径)&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pathName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//连接数据库获取表字段并转换成字符串</span></span><br><span class="line">        NewTableUtils.getTableField(NewTableUtils.Conn(tableName),fromName);</span><br><span class="line">        <span class="comment">//使用io流写入文件到指定位置</span></span><br><span class="line">        NewTableUtils.StrToObject(pathName,fromName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h1><p>GitHub: </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://github.com/OtomiAsuba/TryTableFormToObj</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About me</title>
      <link href="/about.html"/>
      <url>/about.html</url>
      
        <content type="html"><![CDATA[<h1 id="首先，祝您在这里玩的开心。"><a href="#首先，祝您在这里玩的开心。" class="headerlink" title="首先，祝您在这里玩的开心。"></a>首先，祝您在这里玩的开心。</h1><h2 id="关于本博客"><a href="#关于本博客" class="headerlink" title="关于本博客"></a>关于本博客</h2><p>你好，我是澪。这个博客，是为了分享各种前后端技术与一些新的it内容，还有一些日常当中比较好玩的内容，当然也可以分享一些自己创作的音乐作品。</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><h3 id="我是谁："><a href="#我是谁：" class="headerlink" title="我是谁："></a>我是谁：</h3><p>一个想成为全栈开发者的死宅java程序员。</p><h3 id="给自己贴个标签："><a href="#给自己贴个标签：" class="headerlink" title="给自己贴个标签："></a>给自己贴个标签：</h3><p>能不用python就不会用。</p><p>单机游戏依赖症，喜欢玩怪物猎人，喜欢ARPG,RPG,MUG,SLG和GALGAME。STG，FPS与FTG苦手。</p><p>不管什么卡牌游戏都有可能玩,实卡或者网战均可。</p><p>喜欢speedcore、deathcore、kawaiibass,但是写的歌基本不是上述类型。</p><p>不喜欢烂炒。</p><h2 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h2><p>返回首页点击左上角文字或导航栏上的主页均可。</p><p>左侧的文章、标签和分类可以帮你快速找到文章。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>另一个世界</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title> 随笔</title>
      <link href="/set/index.html"/>
      <url>/set/index.html</url>
      
        <content type="html"><![CDATA[<p>::: tip 介绍</p><p>一些最近的小玩意<br>:::</p><span id="more"></span><p>就是个类似随笔的东西。。。</p><p>&#x3D;&#x3D;&#x3D;</p><p>vuepress建博客，还是比较简单的</p><p><img src="/set/index/bq1-1712299663965-1.png"></p><p>&#x3D;&#x3D;&#x3D;</p><p>可以上线测试了，导入一下之前写的几篇文章（</p><p>&#x3D;&#x3D;&#x3D;</p><p>万恶的CAPCOM居然要到25年才发售MHWS？</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
